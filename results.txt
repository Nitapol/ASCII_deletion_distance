Best times in seconds. So far, smaller is better:

    1. Python iMac   344.5
    2. Python iPhone 604.9
    3. Python iPad   479.8
    4. C               4.4
    5. C++             4.7
    6. Swift           7.5
    7. C#             29.1
    8. Java           12.5
    9. Objective-C    50.7
   10. Objective-C(C)  4.5

# Python
# @ iMac, Intel Core i5, 3.2 GHz
# Alexanders-iMac
# macOS version 10.14.3
# Darwin-18.2.0-x86_64-i386-64bit
# Python ('v3.5.1:37a07cee5969', 'Dec  5 2015 21:12:44') GCC 4.2.1 (Apple Inc. build 5666) (dot 3)
# Python ('v3.7.2:9a3ffc0492', 'Dec 24 2018 02:44:43') Clang 6.0 (clang-600.0.57)
# Executing in 64bit
#
#           Time sec,total_score,calls,Time per call (sec)
#  Python 3.5: 501.1,139880640,1200000,0.000417602
#  (with score = sum([penalty(c) for c in str1 + str2]))
#              372.1,139880640,   -   ,0.000310051 (score = float('inf'))
#              344.5,    -    ,   -   ,0.000287047 (score = 2147483647)
#              355.2,    -    ,   -   ,0.000296020 (d = sys.maxsize)(03/01/2019)
#   dummy        2.3,157500000,   -   ,0.000001952 (no distance1() calls)
#  Python 3.7: 934.2,139880640,   -   ,0.000778530
#              691.8,    -    ,   -   ,0.000576507 (03/01/2019)
#  Python 2.7: 478.7,    -    ,   -   ,0.000398887
#

/* C
/  Old plain, almost C code. May be just keyword 'const' from C++.
/  Compiled and tested with iMac Xcode 10.1 C:
/                 8.047232,139880640,1200000,6.706027e-06
*/ Faster then Python 3.5 in 43 times = (344 sec/ 8 sec)

// C++
// @ iMac Xcode 10.1, Intel Core i5,3.2 GHz
// C++ 30.3629,139880640,1200000,2.53024e-05
//      0.1578,157500000,1200000,1.31499e-07 with dummy calls

Alexanders-iPhone: 604.9031600000001,139880640,1200000,0.0005040859666666668
Alexanders-iPad:   479.822409,139880640,1200000,0.0003998520075
Pythonista
macOS version 12.1.4
Darwin-18.2.0-iPhone8,2-64bit
Python ('default', 'Aug 24 2017 16:20:00')
         GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)
Executing in 64bit
### Feb 28, 2019 ###############################################################
Switched to the latest Python 3.7 installed
Alexanders-iMac
macOS version 10.14.3
Darwin-18.2.0-x86_64-i386-64bit
Python ('v3.7.2:9a3ffc0492', 'Dec 24 2018 02:44:43') Clang 6.0 (clang-600.0.57)
Executing in 64bit
675.6264,1332108,12000,0.000563022

Swift 4.2 Debug
568.0267419815063,139880640,1200000,0.00047335561831792194

C# Release x86_64
Visual Studio Community 2017 for Mac Version 7.8.2, Xamarin (Mac & iOS)
30.1362921,139880640,1200000,2.511357675E-05

Swift 4.2 Release
50.62082898616791,139880640,1200000,4.2184024155139926e-05

javac distance1.java
java distance1
Java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
12.533967366,139880640,1200000,1.0444972805E-5

$ g++ -o d distance1.c
clang: warning: treating 'c' input as 'c++' when in C++ mode,
       this behavior is deprecated [-Wdeprecated]
$ ./d
8.417308,139880640,1200000,0.000007
$ g++ -o d distance1.cpp
$ ./d
29.958,139880640,1200000,2.4965e-05
$

Swift 4.2 Release

55.093647956848145,11974080,1200000,4.5911373297373456e-05
func fee(_ c: Character) -> Int {
    if let i = Int(String(c)) {
        return i;
    }
    return 255
}

46.645618081092834,139880640,1200000,3.8871348400910695e-05
func fee(_ c: Character) -> Int {
    var i = 255
    if let v = c.unicodeScalars.first?.value {
        i = Int(v)
        if i < 0 || i > 255 {
            i = 255
        }
    }
    return i
}

46.707436084747314,139880640,1200000,3.8922863403956096e-05
return Int(c.unicodeScalars.first?.value ?? 255)

Tried, but ... no gains:
11.185837030410767,13789776,120000,9.321530858675639e-05
        var s = a;
        s.remove(at: i)
        d=min(d,fee(a[i])+distance1(s,b))
4.845713019371033,13789776,120000,4.038094182809194e-05
        d=min(d,fee(a[i])+distance1(String(a[..<i]+a[a.index(after:i)...]),b))

### Mar 1, 2019 ################################################################

Objective-C
8.299614,139880640,1200000,0.000007 Debug with code inserted from C
4.511470,139880640,1200000,0.000004 Release

6.161686e+01,139880640,1200000,5.134738e-05 Debug (C++ reworked to Objective-C)
7.297239e+01,139880640,1200000,6.081033e-05
6.869905e+01,139880640,1200000,5.724921e-05
Running in Objective-C mode...(use no arguments for C mode)
5.068806e+01,139880640,1200000,4.224005e-05 Release

C++
4.65078,139880640,1200000,3.87565e-06 Release
string& skip_char(string &dst, const string &src, int skip) {
    dst.clear();
    for (int i = 0; i < src.size(); i++)
        if (i != skip)
            dst += src[i];
    return dst;
}

// Shorter, but it will add 7 sec.
string& skip_char(string &dst, const string &src, int skip) {
    dst=src.substr(0,skip)+src.substr(skip+1);
    return dst;
}
11.0014,139880640,1200000,9.16781e-06

    for (int i = 0; i < la; i++)
        d = min(d, fee(a[i]) + distance1(string(a.substr(0,i)+a.substr(i+1)), b));
    for (int i = 0; i < lb; i++)
        d = min(d, fee(b[i]) + distance1(a, string(b.substr(0,i)+b.substr(i+1))));
8.83833,139880640,1200000,7.36527e-06

C
4.428192,139880640,1200000,0.000004 XCode Release
7.720195,139880640,1200000,0.000006 G++ -o d distance1.c
4.434721,139880640,1200000,0.000004 G++ -Os -o d distance1.c

### Mar 2, 2019 ################################################################
C# Visual Studio (Release) Run... Start Without Debugging
29.1201088,139880640,1200000,2.42667573333333E-05

Swift with array instead String
8.059293031692505,139880640,1200000,6.7160775264104205e-06  [UInt32]
7.953811049461365,139880640,1200000,6.628175874551137e-06   [Int]
7.466094970703125,139880640,1200000,6.221745808919271e-06   [UInt8]